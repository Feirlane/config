" This file goes in $HOME/.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50 " keep 50 lines of command line history
set ruler " show the cursor position all the time
set showcmd " display incomplete commands
set incsearch " do incremental searching
set tabstop=4       " Set tab size to 4 spaces
set expandtab " Insert spaces instead of tabs
set shiftround " Indent to nearest tabstop
set nu
set numberwidth=4       " Width of line number field
set autochdir " Autoupdate current dir
set backup " Automatic backup
set shiftwidth=4       " Default number of spaces used for indentation
set cursorline " Show cursor line
set fileencoding=utf-8   " Define default encoding for the files
set encoding=utf-8   " Define default encoding for the files
set noerrorbells " Disable annoying system bells
set novisualbell " Disable blinking visualbells aswell
set showmatch " Set show matching parenthesis
set ignorecase " Ignore case when searching
set clipboard+=unnamed " Use system clipboard
set go+=a       " Visual selection automatically copied to clipboard
set title " Change the terminal's title
set textwidth=0       " Unset text width variable
set wrapmargin=0       " Unset wrap margin variable
set virtualedit=onemore " Allow for cursor beyond last character
set laststatus=2       " Always show the statusline"
setlocal cm=blowfish
" setl scrollbind            " If there are two windows with scroll bind option enabled, scroll them simultaneously"

"nmap > >>
"nmap < <<

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  "
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif


" Keybinding Section "
"
:nmap <C-t> :tabprevious<CR>
:nmap <C-l> :tabnext<CR>
:nmap <C-t> :tabnew<CR>
:map <C-h> :tabprevious<CR>
:map <C-l> :tabnext<CR>
:map <C-t> :tabnew<CR>
:imap <C-h> <Esc>:tabprevious<CR>i
:imap <C-l> <Esc>:tabnext<CR>i
:imap <C-l> <Esc>:tabnew<CR>i

                                                                                          
" original repos on github                                                                
" Bundle 'tpope/vim-fugitive'                                                             
" Bundle 'Lokaltog/vim-easymotion'                                                        
" Bundle 'rstacruz/sparkup', {'rtp': 'vim/'}                                              
" Bundle 'tpope/vim-rails.git'                                                            

" Bundle 'L9'                                                                             
" Bundle 'FuzzyFinder'                                                                    

" Change bundler for vim-plug
" filetype off                   " required!                                                
" call vundle#rc()                                                                          
call plug#begin('~/.vim/plugged')

Plug 'altercation/vim-colors-solarized'

Plug 'lunaru/vim-less'

Plug 'StanAngeloff/php.vim'

Plug 'Arduino-syntax-file'

Plug 'majutsushi/tagbar'

Plug 'Raimondi/delimitMate'

Plug 'scrooloose/nerdtree'

Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
" Powerline setup
set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 9

Plug 'klen/python-mode'
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
" <Ctrl-Space>  Rope autocomplete
" <Ctrl-c>g     Rope goto definition
" <Ctrl-c>d     Rope show documentation
" <Ctrl-c>f     Rope find occurrences
" <Leader>b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1

" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" Disabled jedi-vim in favor of YouCompleteMe
" Plug 'davidhalter/jedi-vim'
" let g:jedi#popup_select_first = 1
" let g:jedi#auto_vim_configuration = 1
" let g:jedi#use_tabs_not_buffers = 1
" let g:jedi#completions_enabled = 1
" let g:jedi#goto_assignments_command = "<leader>g"
" let g:jedi#goto_definitions_command = "<leader>d"
" let g:jedi#documentation_command = "K"
" let g:jedi#usages_command = "<leader>n"
" let g:jedi#completions_command = "<C-Space>"
" let g:jedi#rename_command = "<leader>r"
" let g:jedi#show_call_signatures = "1"

Plug 'sukima/xmledit'

Plug 'django.vim'

Plug 'Valloric/YouCompleteMe'

Plug 'scrooloose/syntastic'
let g:syntastic_aggregate_errors = 1

Plug 'kien/ctrlp.vim'
map <Leader><Tab> :CtrlPMRUFiles<CR>

Plug 'kristijanhusak/vim-multiple-cursors'

Plug 'Valloric/MatchTagAlways'
let g:mta_filetypes = {
    \ 'html' : 1,
    \ 'xhtml' : 1,
    \ 'xml' : 1,
    \ 'jinja' : 1,
    \ 'php' : 1,
    \}

Plug 'ap/vim-css-color'

Plug 'vim-scripts/wombat256.vim'

Plug 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

Plug 'junegunn/jellybeans.vim'

Plug 'sjl/badwolf'

call plug#end()

au BufRead,BufNewFile *.pde set filetype=arduino
au BufRead,BufNewFile *.ino set filetype=arduino

set t_Co=256
set t_ut=
set term=screen-256color
set background=dark
let g:solarized_termtrans=1
let g:solarized_visibility="high"
let g:solarized_contrast="high"
let g:solarized_termcolors=256
colorscheme solarized
"colorscheme wombat256mod

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

filetype plugin indent on
